import CookieJar from "./cookiejar";

export interface RobloxUser {
  id?: string;
  Id?: string;
  Username?: string;
  username?: string;
  name?: string;
  Name?: string;
}

// change the mode of request to "no-cors" to avoid CORS errors on all requests
const defaultRequestOptions: RequestInit = { mode: "no-cors" };

export async function getRobloxUser(username: string): Promise<RobloxUser> {
  const response = await fetch(`https://api.roblox.com/users/get-by-username?username=${username}`, { ...defaultRequestOptions });
  const json = await response.json();
  return json;
}

export async function getRobloxUserById(id: string): Promise<RobloxUser> {
  const response = await fetch(`https://api.roblox.com/users/${id}`, { ...defaultRequestOptions });
  const json = await response.json();
  return json;
}

export async function getRobloxUserHeadshot({ usernameOrId, res }: { usernameOrId: string, res: number }): Promise<string> {
  let user: RobloxUser | null = null; 
  if (isNaN(parseInt(usernameOrId))) 
    user = await getRobloxUser(usernameOrId);
  let id
  if (user === null)
    id = usernameOrId
  else if (user.Id === undefined)
    id = user.id
  else
    id = user.Id
    
  if (!id) 
    throw new Error("Could not get Roblox user id");
  
  const response = await fetch(`https://thumbnails.roblox.com/v1/users/avatar-headshot?userIds=${id}&size=${res}x${res}&format=Png&isCircular=false`, {
    ...defaultRequestOptions,
  });
  const responseCopy = response.clone();
  try {
    const json = await response.json();
    return json.Url;
  } catch (e) {
    if (e instanceof SyntaxError) {
      throw new SyntaxError("Error parsing JSON. Here is a part of the JSON: " + (await responseCopy.text()).substring(0, 100));
    }
    throw e;
  }
}

export async function getRobloxUserFromCookies(cookies: CookieJar): Promise<RobloxUser> {
  const response = await fetch("https://users.roblox.com/v1/users/authenticated", {
    headers: {
      "Cookie": cookies.toString(),
    }
  });

  return response.json();
}

export async function isAccountValid(cookie: CookieJar) {
  const { status } = await fetch("https://users.roblox.com/v1/users/authentificated", { headers: { "Cookie": cookie.toString() }, ...defaultRequestOptions });
  if (status === 200)
    return true;
  else
    return false;
}

const isValidRbxID = (id: string) => isNaN(Number(id)) !== true;

export async function getUniverseID(gameId: string) {
  // check if gameId is a valid rbx id
  if (!isValidRbxID(gameId)) {
    throw new Error("Invalid gameId");
  }

  const response = await fetch(`https://api.roblox.com/universes/get-universe-containing-place?placeid=${gameId}`, { ...defaultRequestOptions });
  const json = await response.json();
  if (json.errors)
    throw new Error(json.errors[0].message);
  return json.UniverseId;

}

export interface iRobloxAsset {
  assetTypeId: number;
  assetType: string;
  imageId: number;
  videoHash?: any;
  videoTitle?: any;
  approved: boolean;
}

/**
 * Using the https://games.roblox.com/v2/games/{gameId}/media endpoint, get the assets for a game
 * @param gameId The Game ID of the game you want to get the assets for
 */
export async function getRobloxGameAssets(gameId: string): Promise<iRobloxAsset[]> {
  const response = await fetch(`https://games.roblox.com/v2/games/${gameId}/media`, { ...defaultRequestOptions });
  const json = await response.json();
  return json.assets;
}


export type RobloxAssetSize = '50x50' | "128x128" | "150x150" | "256x256" | "512x512";

const thumbnailApiEndpoint = "https://thumbnails.roblox.com"
export async function getThumbnail(universeIds: string[], opts: { size: RobloxAssetSize, isCircular: boolean, returnPolicy?: "PlaceHolder" | "AutoGenerated" | "ForceAutoGenerated" }): Promise<string[]> {
  const getIconUrl = thumbnailApiEndpoint + "/v1/games/icons";
  const { size, isCircular, returnPolicy } = opts;

  const formData = new URLSearchParams();
  formData.append("universeIds", universeIds.join(","));
  formData.append("returnPolicy", returnPolicy || "PlaceHolder");
  formData.append("size", size);
  formData.append("isCircular", isCircular.toString());
  formData.append("format", "png");

  let responseClone: Response | undefined;
  try {
    const response = await fetch("https://thumbnails.roblox.com/v1/games/icons?" + formData.toString(), {
      method: "GET",
      headers: [
        ["Accept", "application/json"],
      ],
      ...defaultRequestOptions,
    });
    responseClone = response.clone();

    const json: {
      errors?: { code: number, message: string }[],
      data?: { targetId: number, imageUrl: string }[]
    } = await response.json();
    json.data ??= [];
    if (json.errors) {
      throw new Error(json.errors[0].message);
    }
    if (!json.data)
      return [];

    return json.data.map(thumbnail => thumbnail.imageUrl);

  } catch (e) {
    if (e instanceof SyntaxError && responseClone) {
      throw new SyntaxError("Error parsing JSON. Here is a part of the JSON: " + (await responseClone.text()).substring(0, 100));
    } else if (e instanceof Error) {
      throw e
    } else {
      if (responseClone)
        throw new Error(`Request failed, status code: ${responseClone.status}`);
    }
  }

  return [];
}